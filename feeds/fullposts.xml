<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
			<channel>
				<title>Clagnut</title>
				<link>https://clagnut.com/</link>
				<atom:link href="https://clagnut.com/feeds/fullposts.xml" rel="self" type="application/rss+xml" />
				<description>A blog by Richard Rutter. Root through a heap of web design and development stuff and a few other tasty morsels. (latest 5 posts in full)</description>
				<language>en-gb</language>
				<copyright>Copyright 2003-2024, Richard Rutter</copyright>
				<webMaster>rich@clagnut.com (Richard Rutter)</webMaster>
				<managingEditor>rich@clagnut.com (Richard Rutter)</managingEditor>
				<image>
					<url>https://clagnut.com/images/clagnut_rss.png</url>
					<link>https://clagnut.com/</link>
					<title>Clagnut</title>
					<width>88</width>
					<height>31</height>
				</image>
		<item>
			<pubDate>Fri, 01 Mar 2024 20:00:36 PST</pubDate>
			<title>Retrofitting fluid typography</title>
			<link>https://clagnut.com/blog/2428/</link>
			<guid>https://clagnut.com/blog/2428/</guid>
			<description><![CDATA[<section><div class='prose'><p>Back in December 2023, <a href="https://www.creativeboom.com/">Creative Boom</a> launched a refreshed identity and a <a href="https://www.creativeboom.com/news/a-new-creative-boom-launches/">redesigned website</a>. It’s a terrific magazine and the redesign does a great job of bringing impactful imagery to the fore, with restrained typography supporting the writing really effectively.</p>

<p>Like any modern website, it is responsive and so adapts well to different screen sizes. However it does so using five breakpoints, resulting in six different designs, all of which are fixed width except the smallest.</p>

<figure class="fullbleed"><img loading='lazy' src="https://clagnut.com/images/2428/cb-breakpoints.png" alt="A row of 6 screenshots showing the Creative Boom website as it looks at each breakpoint" /></figure>

<div class="group-with-aside stack">
<p>I thought this was a missed opportunity, so as part of my forthcoming <a href="https://patternsday.com/">Patterns Day</a> talk I decided to rebuild the article page using <a href="https://utopia.fyi/">Utopian</a> fluid typography: one adaptive design with no media queries, less compromise across viewports, and far less design and development debt.</p>

<aside><p>If you’re quick you can <a href="https://ti.to/clearleft/patternsday2024/discount/JOINRICHARD">use the code <abbr class='c2sc'>JOINRICHARD</abbr></a> to get a 10% discount.</p></aside></div>

<p>Fluid typography means thinking in terms of type scales and flexible spacing across your defined design space. This means deciding upon the size of the smallest screen and the largest screen (viewport) that you want to concern yourself with. These form the boundaries of your design space. Thereafter you’re just designing at the extremes – design for the smallest screen and the largest viewport, and let maths fill in the gap. This is <a href="https://adactio.com/journal/18982">declarative design</a> in action, rather than the more <em>imperative</em> approach that Creative Boom has taken.</p>

<p>There’s much more detail about this on the <a href="https://utopia.fyi/blog">Utopia blog</a>, but for now I’ll take you through my process of converting Creative Boom to fluid typography. The general approach is:</p>

<ol>
<li>Define a type scale and set the spacing for a small screen (<code>@min</code>).</li>
<li>Define a type scale and set the spacing for a large viewport (<code>@max</code>).</li>
<li>Tell the browser to interpolate between the two scales and spacing systems, based on the current viewport width (the Utopia calculator tools do this for you).</li>
</ol>

<h2>Type&nbsp;scales</h2>

<p>My first job was to define the body text size for my two extreme viewport sizes. Creative Boom’s biggest media query happens at 1536px so I used that as my <code>@max</code> screen size. At this viewport the text is 20px (assuming no change to the default browser text size).</p>

<p>At Clearleft our design spaces tend to start with a minimum screen size of 320px, so I used that as my <code>@min</code>. Creative Boom uses 20px for its body text regardless of viewport size – I think this impairs the reading experience on a small screen, so I chose a more appropriate 17px.</p>

<p>I could now plug these numbers into Utopia’s type calculator and start playing around to identify the two type scales that work best for <code>@min</code> and <code>@max</code> viewports. In order to determine each type scale I needed to look at the main heading sizes used by Creative Boom: the biggest size of <code>h1</code> is 60px, the smallest is 40px. Through a quick bit of experimentation I found that setting a type scale increment of 1.2 for my <code>@min</code> viewport, and 1.25 for the <code>@max</code> viewport size gave me type sizes of 42px and 61px respectively at step 5, which are close enough – remember the typography is fluid, so by definition it’s never going to match a fixed design exactly.</p>

<figure><img loading='lazy' src="https://clagnut.com/images/2428/utopia-typetool.png" alt="Screenshot of Utopia's type tool" /><figcaption>Utopia's type tool calculates the text sizes for you, and also generates the necessary <abbr class='c2sc'>CSS</abbr></figcaption></figure>

<p>Choosing <code>step 5</code> on the type scale to represent <code>h1</code> headings left plenty of smaller steps in the scale to apply to subheadings and other significant text sizes. The type scales also provided sensible smaller text sizes for <code>step -1</code> and <code>step -2</code> which I could use for ancillary text elements such as tags and meta data.</p>

<p>Once I’d pasted in Utopia’s generated <abbr class='c2sc'>CSS</abbr> to make the fluid type scales work, I was able to use the following simple <abbr class='c2sc'>CSS</abbr> to set type sizes:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">h1    { font-size: var(--step-5); }
h2    { font-size: var(--step-1); }
body  { font-size: var(--step-0); }
.nav  { font-size: var(--step--1); }
.tags { font-size: var(--step--2); }
</code></pre></div></figure>

<p>Here's where they were applied:</p>

<figure><img loading='lazy' src="https://clagnut.com/images/2428/cb-typesteps.png" alt="Screenshot: type steps start with 5 on the <abbr class='c2sc'>H1</abbr>, go through to 0 on the paragraphs and -2 on the tags" /><figcaption>Type steps applied to all text elements of the design</figcaption></figure>

<p>I also used a type step token to constrain the overall page width for very large viewports. This was in order to keep the line-length comfortable and the layout in line with the Creative Boom design. I went for 77ems based on the body size (this width also accommodates the sidebar):</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">.masthead, .article-header, .article-body {
    max-width: calc(var(--step-0) * 77);
}
</code></pre></div></figure>

<h2>Fluid&nbsp;spacing</h2>

<p>With the type scales defined and applied, I could now turn my attention to the spacing. The <a href="https://utopia.fyi/space/calculator?c=320,17,1.2,1536,20,1.25,5,2,&amp;s=0.75%7C0.5%7C0.25,1.5%7C2%7C3%7C4%7C6,s-l&amp;g=s,l,xl,12">Utopia spacing tool</a> sets up simple t-shirt sizes for spacing, giving you tokens related to multiples of your body text size. In other words, as the body text varies with viewport size, so do the spacing tokens. Following a simple reset, I first set about spacing the typography, going down the ‘page’. Using the Creative Boom design as a guide, I just had to ask myself “on a scale of <abbr class='c2sc'>XS</abbr> to <abbr class='c2sc'>XL</abbr>, how big is that space?”. That gave me declarations like these:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">h1      { margin-block-start:var(--space-m); }
h2      { margin-block:var(--space-s); }
h3      { margin-block-end: var(--space-m); }
h4      { margin-block: var(--space-xs); }
p       { margin-block-end: var(--space-s); }
figure  { margin-block: var(--space-xl); }
.byline { margin-block-end: var(--space-xs); }
date    { margin-block-end: var(--space-xs); }
</code></pre></div></figure>

<p>Which were applied wherever space was required in the vertical plane:</p>

<figure><img loading='lazy' src="https://clagnut.com/images/2428/cb-fluid-spacing-v.png" alt="Screenshot" /><figcaption>Space tokens applied in the vertical plane</figcaption></figure>

<p>Fluid spacing in the vertical plane is relatively straight forward as  scrolling means there is not so much of a limitation to a small viewport. Laying things out and spacing them apart in the horizontal place is a different ballgame. By definition small screens have very little width to play with, whereas large viewports have lots. Defining a fluid spacing scheme that works across both extremes is therefore more challenging.</p>

<p>Fortunately Utopia again comes to the rescue with its space value pairs. These enable you to specify much more dramatic space variance between different viewport sizes. One of the most obvious uses is the padding between the article and the viewport edge. At the <code>@min</code> viewport, I’ve set it to <code><abbr class='c2sc'>XS</abbr></code> – just enough to provide breathing room to the viewport boundary. For the <code>@max</code> I was able to set a suitably generous <code>2XL</code> amount of spacing. I made these decisions through quick experimentation using variations of a single spacing token:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">.masthead, .article-header, .article-body {
  padding-inline: var(--space-xs-2xl);
}
</code></pre></div></figure>

<p>Another bit of spacing of note is the gutter between the article text and the <em>Editor’s Picks</em> sidebar. I used flexbox to provide media-query-free responsive layout (see <a href="https://every-layout.dev/layouts/sidebar/">Every Layout</a>) so I was able to simply set the <code>gap</code> property. Again in keeping with the design, I’m increasing the spacing significantly for wider viewports:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">.article-body {
  display: flex;
  gap: var(--space-s-xl);
} 
</code></pre></div></figure>

<p>To ensure a fully flexible design, I’ve used Utopian spacing tokens almost everywhere a space is required in the horizontal plane:</p>

<figure><img loading='lazy' src="https://clagnut.com/images/2428/cb-fluid-spacing-h.png" alt="Screenshot, indicating an <abbr class='c2sc'>XS</abbr> to 2XL space value pair padding the page" /><figcaption>Space value pairs applied in the horizontal plane</figcaption></figure>

<h2>The&nbsp;final&nbsp;result</h2>

<p>And here’s the final result in all its fluid glory:</p>

<figure class="fullbleed"><video controls poster="/images/2428/cb-fluid.png"><source src="https://clagnut.com/images/2428/cb-fluid.webm" type="video/webm" /><source src="https://clagnut.com/images/2428/cb-fluid.mp4" type="video/mp4" /></video><figcaption>The rebuilt Creative Boom article page fluidly resizing from 320px to 1600px</figcaption></figure>

<p>Feel free to <a href="https://cb-fluid.netlify.app">play with the rebuild</a>, although please remember this is just a prototype, so some aspects are missing and the underlying <abbr class='c2sc'>HTML</abbr> in particular is far from production ready.</p>

<p>In my experience it’s easier to design using <a href="https://utopia.fyi/blog/designing-with-fluid-type-scales">Utopian principles</a> first rather than retrospectively. That said, although I rebuilt this page from scratch, it does show you can retrospectively apply fluid typography to a design, although it’s definitely better to think in those terms from the start.</p></div></section>
<p><a href='https://clagnut.com/blog/2428/'>Read or add comments</a></p>]]></description>
			<category domain="https://clagnut.com/archive/typography/">Typography</category>
			<category domain="https://clagnut.com/archive/css_techniques/">CSS techniques</category>
			<category domain="https://clagnut.com/archive/conferences/">Conferences</category>
		</item>
		<item>
			<pubDate>Sun, 15 Oct 2023 15:50:05 PST</pubDate>
			<title>Pagination widows, or, Why I&#226;&#8364;&#8482;m embarrassed about my ebook</title>
			<link>https://clagnut.com/blog/2426/</link>
			<guid>https://clagnut.com/blog/2426/</guid>
			<description><![CDATA[<section><div class='prose'><p>The physical copies of <a href="https://book.webtypography.net">my book on Web Typography</a> sold out quickly. I self-published, and print runs are expensive when youâ€™re funding them yourself, so numbers were limited. However it was always my plan to publish an ebook at the same time, and that has out-sold the hard copy by an order of magnitude.</p>

<p>I set myself some pretty stiff criteria for the ebook – it needed to replicate the design of print edition as far as possible, adapting to the medium when required. To this day Iâ€™m proud of the result. I completely hand-coded the <a href="https://www.w3.org/TR/epub-33/">ePub</a> (meaning itâ€™s mostly <abbr class='c2sc'>HTML</abbr> and <abbr class='c2sc'>CSS</abbr> under the hood), and I believe the effort paid off. If youâ€™ll forgive the rather un-British boasting, I still think itâ€™s one of the more advanced ebooks out there: with embedded fonts, <abbr class='c2sc'>SVG</abbr> images, alt text, bold typographic heirarchy, Javascript-driven syntax highlighting and what I hope is a nuanced, highly readable overall design. Not bad for an ebook anyway, although Iâ€™ll grant you the bar is not set high (notable exceptions include <a href="https://abookapart.com">A Book Apart</a> publications).</p>

<p>All hubris aside, I am still frequently embarrassed by how the ebook renders, particularly in Apple Books. Like a well structured webpage, my book uses a lot of headings and subheadings – I wrote it to be referenced as much as to be read, so this helps the scanability of the text. However Apple Books, and other WebKit, Gecko, or old Blink-powered ebook readers will happily do this to headings:</p>

<figure class="fullbleed"><img loading='lazy' src="https://clagnut.com/images/2426/ebook-widows.png" alt="Screen shot of Apple Books rendering an ePub" /></figure>

<p>Notice the orphaned heading â€œLean on six centuries of typesettingÂ experienceâ€ with its following paragraph out of sight on the next page. This is a typographic no-no, and has been for – um – six centuries. Far better for the reader to have the heading attached to its paragraph on the next page, even if that means leaving some redundant whitespace in its place.</p>

<p>Since 1997(!) and the early drafts of <a href="https://www.w3.org/TR/WD-CSS2-971104/page.html#h-12.2">CSS2</a>, there has been an easy way to tell browsers not insert a page break directly after, or in the middle of, a heading:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">h2 {
    page-break-after: avoid;
    page-break-inside: avoid;
}
</code></pre></div></figure>

<div class="group-with-aside stack">  
<p>Nowadays the modern way to do that is defined in the <a href="https://drafts.csswg.org/css-break/#breaking-controls">CSS Fragmentation Module Level 3</a> even more simply as:</p>
    
<aside><p>The more generic <code>break-</code> properties apply to both multi-column layout and paged media.</p></aside></div>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">h2 {
    break-after: avoid;
    break-inside: avoid;
}
</code></pre></div></figure>

<p>However 26 years later, <code>break-after:avoid</code> is still not supported by either Safari or Firefox, and was only <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=223068#c54">introduced to Chrome 108</a> in December 2022. Iâ€™ve put together a <a href="https://codepen.io/clagnut/pen/MWZRBaM">test for support of <code>break-after</code> and <code>break-inside</code></a> in multi-column layout. Have a play with it in Chrome – try removing <code>break-inside:avoid</code> and then <code>break-after:avoid</code> from the <code>h2</code> rule in the <abbr class='c2sc'>CSS</abbr> and you should see how the subheadings end up at the bottom of a column, or worse still, split over two columns.</p>

<p>Browser support for <abbr class='c2sc'>CSS</abbr> properties tends to follow demand from web developers. Unlike in 1997 – or indeed 2017 – there is now an annual Interop arrangement between browser rendering engine makers in which they agree a common list of priorities for <abbr class='c2sc'>CSS</abbr> and other web technologies. Interop 2024 has just closed for new proposals. Unfortunately I didnâ€™t manage to submit a request in time for breaking controls to be universally implemented. Thankfully Scott Kellum of <a href="https://typetura.com">Typetura</a> did put in a <a href="https://github.com/orgs/web-platform-tests/projects/3/views/1?pane=issue&amp;itemId=40510069">proposal for advanced multi-column layouts</a> to be improved, and this included support for <code>break-</code> properties. Sadly thereâ€™s little to no clamour for it from other developers – the blog post youâ€™re reading probably doubles the published demand, and thatâ€™s just for within columns.</p>

<p>Paged media is very much a forgotten aspect, and itâ€™s probably true that web pages are rarely printed in the grand scheme of things, however ebooks are definitely a popular form of paged media and deserve attention. Iâ€™d certainly like to read ebooks without failed typographic fundamentals.</p></div></section>
<p><a href='https://clagnut.com/blog/2426/'>Read or add comments</a></p>]]></description>
			<category domain="https://clagnut.com/archive/browsers/">Browsers</category>
			<category domain="https://clagnut.com/archive/typography/">Typography</category>
			<category domain="https://clagnut.com/archive/css_techniques/">CSS techniques</category>
			<category domain="https://clagnut.com/archive/apple/">Apple</category>
		</item>
		<item>
			<pubDate>Mon, 20 Mar 2023 17:04:09 PST</pubDate>
			<title>Preventing too-short final lines of text blocks</title>
			<link>https://clagnut.com/blog/2425/</link>
			<guid>https://clagnut.com/blog/2425/</guid>
			<description><![CDATA[<section><div class='prose'><p>At the end of my previous post heralding <a href="https://clagnut.com/blog/2424/">an end to typographic widows on the web</a> I wrote that <q>Iâ€™d settle for direct control over widows and orphans in text blocks</q>. It turns out not to be quite as a simple as one might think. Over the years, thereâ€™s been <a href="https://lists.w3.org/Archives/Public/www-style/2015Jan/0012.html">multiple</a> <a href="https://github.com/w3c/csswg-drafts/issues/2396">discussions</a> on the topic within the CSS Working Group (CSSWG). Following my post, I talked at length with other designers at Clearleft – in particular James Gilyead of <a href="https://utopia.fyi">Utopia.fyi</a> fame – and it was surprisingly difficult to come to a definitive conclusion, particularly around the exceptions.</p>

<p>Put simply, one doesn't want a solitary word (a widow) on the final line of a block. But the tricky thing to answer is: what's the effect of bringing down a word from the previous line in order to address that? If you were fixing this manually there might be a ripple effect back up the paragraph until the best overall text shape is achieved. I doubt that's something a browser could afford to do, given the (understandable) reluctance to implement any justification routines beyond the crudest greedy method.</p>

<p>Bit by bit, the <abbr class='c2sc'>CSSWG</abbr> seems to have been converging on a potential solution. In the current draft of the <abbr class='c2sc'>CSS</abbr> Text Module Level 4, there is mention of <a href="https://drafts.csswg.org/css-text-4/#last-line-limits">Last Line Minimum Length</a>, which raises an Issue as follows:</p>

<blockquote>
  <p>Issue is about requiring a minimum length for lines. Common measures seem to be: at least as long as the text-indent; at least X characters; percentage-based. [â€¦] People have requested word-based limits, but since this is really dependent on the length of the word, character-based is better.</p>
</blockquote>

<p><a href="https://github.com/AmeliaBR">Amelia Bellamy-Royds</a> took the Last Line Minimum Length idea and <a href="https://github.com/w3c/csswg-drafts/issues/3473#issuecomment-560136177">proposed a solution</a> with a new <code>min-last-line</code> property. Her proposed property would specify a minimum length for the final line, and a minimum length for the penultimate line once youâ€™d dropped a word or more down to address the short final line.</p>

<p>This seemed like a pretty smart approach. Inspired by Ameliaâ€™s idea and my conversation with James, the proposal Iâ€™ve come to is conceptually similar to the <a href="https://drafts.csswg.org/css-text-4/#hyphenate-char-limits">hyphenate-char-limits</a> property. Set a minimum character length for the final line along with a maximum number of characters to bring down from the previous line:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">min-last-line: 12 6
</code></pre></div></figure>

<p>Where <code>12</code> is the minimum line length in characters, and <code>6</code> is the maximum number of characters that can be brought down from the previous line to make that so. If the 6 is omitted, it would assumed to be equal to the 12.</p>

<p>It might be useful to some people for the same approach to be expressed as percentages of box width instead:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">min-last-line: 20% 10%
</code></pre></div></figure>

<p>Where 20% is the minimum length of the final line in terms of percentage of box width, and 10% is the maximum length that can be removed from the previous line.</p>

<p>Thereâ€™s no reason I can think of why these values couldnâ€™t be mixed:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">min-last-line: 20% 8
</code></pre></div></figure>

<p>Meaning the last line shouldnâ€™t be shorter than <code>20%</code> of the block width, but you shouldnâ€™t bring down more than <code>8</code> characters to achieve that.</p>

<p><strong>I've put together a very rough-and-ready <a href="https://clagnut.com/sandbox/min-last-line.html">proof of concept here</a>.</strong></p>

<p>The idea is to have something to test out the concept of a minimum final line length and maximum amount of text that can be brought down from the line above to address that. Please feel free to have a play, copy, adapt and generally improve. Your comments are very welcome, preferably in the <a href="https://github.com/w3c/csswg-drafts/issues/3473">CSSWG issue thread</a>.</p></div></section>
<p><a href='https://clagnut.com/blog/2425/'>Read or add comments</a></p>]]></description>
			<category domain="https://clagnut.com/archive/standards/">Web standards</category>
			<category domain="https://clagnut.com/archive/typography/">Typography</category>
			<category domain="https://clagnut.com/archive/css_techniques/">CSS techniques</category>
		</item>
		<item>
			<pubDate>Tue, 07 Mar 2023 09:58:18 PST</pubDate>
			<title>An end to typographic widows on the web</title>
			<link>https://clagnut.com/blog/2424/</link>
			<guid>https://clagnut.com/blog/2424/</guid>
			<description><![CDATA[<section><div class='prose'><p>Currently shipping in <a href="https://www.google.com/intl/en_uk/chrome/canary/">Chrome Canary</a>, and thus soon to be in Blink-based browsers including Edge, is a relatively new <abbr class='c2sc'>CSS</abbr> declaration which promises to virtually end typographic widows.</p>

<p>The <code>text-wrap:balance</code> declaration in <a href="https://www.w3.org/TR/css-text-4/#text-wrap">CSS Text Module Level 4</a> says that line breaks should be chosen to balance out the line lengths in a block of text. How exactly that is done is â€˜UA-definedâ€™, in other words itâ€™s determined by the rendering engine rather than any specific rules or guidelines set in the <abbr class='c2sc'>CSS</abbr> specifications. This is how todayâ€™s version of Chrome Canary balances out one of the longer headings in this blog:</p>

<figure>
    <img loading='lazy' src="https://clagnut.com/images/2424/textwrap-wrap.png" alt="A screenshot showing a long heading with the final word dropped to the sewcond line as a widow" style="box-shadow: 0 0.5rem 1rem hsl(0 0% 0% / 20%)" />
    <figcaption>
        Default text wrapping
    </figcaption>
</figure>

<figure>
    <img loading='lazy' src="https://clagnut.com/images/2424/textwrap-balance.png" alt="A screenshot showing the same long heading with the text split evenly over two lines" style="box-shadow: 0 0.5rem 1rem hsl(0 0% 0% / 20%)" />
    <figcaption>
        â€˜Balancedâ€™ text wrapping
    </figcaption>
</figure>

<p>What this <strong>is not</strong> is control over widows and orphans. My previous examples show how the text balancing algorithm in Chrome Canary does indeed prevent a widow (the single word dropped down), and thatâ€™s a highly likely outcome. But you have to remember that the balancing job shortens the lines, so this isnâ€™t an approach you would take to prevent widows at the end of paragraphs. In fact Canary limits balancing to 4 lines (the spec itself recommends 10 or fewer). The <abbr class='c2sc'>CSS</abbr> spec itself makes the application clear:</p>

<blockquote>
  <p>the balance value is intended for titles and captions, where equal length lines of text tend to be preferred</p>
</blockquote>

<p>With that in mind, this is the rule Iâ€™ve applied to this blog, and Iâ€™d say could end up in most peopleâ€™s default reset:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">h1, h2, h3, h4, h5, h6, caption, figcaption {
    text-wrap:balance;
}
</code></pre></div></figure>

<p>Balancing left-aligned headings is not always preferable. I would love to have a value for <code>text-wrap</code> whose sole purpose is to prevent widows, without any other formatting involved. One could borrow from the <code>widows</code> property of the <a href="https://www.w3.org/TR/css-break-3/#widows-orphans">Fragmentation Module</a>:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">text-wrap: 2 widows  /* maybe one day */
</code></pre></div></figure>

<p>Where <code>2</code> in this case specifies the minimum number of words allowed on the final line of a text block. There would have to be slightly more  to it than this, in particular a single word should be allowed if the final two words together would be too long to fit inside the text block.</p>

</section>
<section class='stack center'>

<p>Another value in the specification is <code>text-wrap:pretty</code>. If itâ€™s ever implemented, this might – as an outcome – reduce widows and orphans in running text. For decades there have been sophisticated algorithms for wrapping text across multiple lines. For performance purposes, browsers use the most basic approach, the so-called first-fit/greedy algorithm, which takes one line at a time, wrapping if itâ€™s too long, and moving on to the next. In typographersâ€™ eyes this gives sub-optimal results, and is one of the reasons text justification is so awful on the web.</p>

<p>Better algorithms, such as <a href="https://github.com/bramstein/typeset/">Knuth-Plass</a>, take into account entire paragraphs and achieve a more nuanced approach to text wrapping by reducing and increasing spacing between words. The spec says that <q>as optimal results often take more time, <code>pretty</code> is offered as an opt-in to take more time for better results. The <code>pretty</code> value is intended for body text, where the last line is expected to be a bit shorter than the average line. [â€¦ The browser] should bias for better layout over speed, and is expected to consider multiple lines, when making break decisions.</q></p>

<p>Algorithms such as Knuth-Plass wonâ€™t necessarily eliminate widows and orphans, but might go some way to doing so. The reluctance to using such approaches is understandable, however, as they can be extremely demanding: the processing requirements increase quadratically with the paragraph length. That said, a value such as <code>pretty</code> gives the option to choose different text wrapping procedures depending on conditions (resident processing power, length of text, etc). One day perhaps. Meanwhile Iâ€™d settle for direct control over widows and orphans in text blocks.</p></div></section>
<p><a href='https://clagnut.com/blog/2424/'>Read or add comments</a></p>]]></description>
			<category domain="https://clagnut.com/archive/browsers/">Browsers</category>
			<category domain="https://clagnut.com/archive/typography/">Typography</category>
			<category domain="https://clagnut.com/archive/css_techniques/">CSS techniques</category>
		</item>
		<item>
			<pubDate>Fri, 10 Feb 2023 10:35:48 PST</pubDate>
			<title>Font optical sizing bug in Safari 16</title>
			<link>https://clagnut.com/blog/2423/</link>
			<guid>https://clagnut.com/blog/2423/</guid>
			<description><![CDATA[<section><div class='prose'><p><ins><strong>Update</strong>: as of Safari 16.4, this bug <a href="https://github.com/WebKit/WebKit/pull/10126">has been fixed</a>. I've updated the code snippet to reflect this. Thanks to the efforts of Myles and team for turning this around so quickly.</ins></p>

<p>In my <a href="https://clagnut.com/blog/2422">previous post</a> I extolled the virtues of Literataâ€™s font optical sizing, in particular how it worked automatically in the browser. By â€˜itâ€™ I mean how the corresponding style was chosen along the optical size axis of the variable font, based on type size.</p>

<figure>
    <img loading='lazy' src="https://clagnut.com/images/2423/literata-optical-axis.png" alt="Four type styles in a line, ranging from low contrast on the left to high contrast on the right."/>
    <figcaption>
        Literataâ€™s optical size axis from <7px to >72px. Image Â©TypeTogether.
    </figcaption>
</figure>

<p>This behaviour is turned on by default, but if you wanted to turn off the automatic optical sizing, you can use this declaration, the effect being to style text as if it were set at 12px:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">font-optical-sizing: none;
</code></pre></div></figure>

<p>And you can turn it back on with:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">font-optical-sizing: auto;
</code></pre></div></figure>

<p>Automatic selection of optical size styles in a variable font has been supported in browsers since at least 2020. That is until the release of Safari 16 with macOS Ventura. A regression was inadvertently introduced meaning the browser acted as if <code>font-optical-sizing</code> was turned off. <a href="https://bugs.webkit.org/show_bug.cgi?id=247987">The bug</a> was an unintened consequence of improvements being made to <a href="https://developer.apple.com/documentation/coretext">Core Text</a>. Fortunately itâ€™s being actively fixed.</p>

<p>So what to do in the meantime? The answer is to use the low level <code>font-variation-settings</code> property to manually set the optical size. I only want to do this for Safari 16.1, 16.2 and 16.3, so firstly I use a bit of clunky user agent sniffing to set a root-level class accordingly:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-html">&lt;script&gt;
var root = document.getElementsByTagName('html')[0];
if (navigator.userAgent.indexOf('Safari') != -1 &amp;&amp;
    navigator.userAgent.indexOf('Chrome') == -1 &amp;&amp;
    ( (navigator.userAgent.indexOf('Version/16.1') != -1) ||
      (navigator.userAgent.indexOf('Version/16.2') != -1) ||
      (navigator.userAgent.indexOf('Version/16.3') != -1) )  {
    root.classList.add("isSafari16");
}
&lt;/script&gt;
</code></pre></div></figure>

<p>Then I style my headings and body text according to the most appropriate style along the optical size axis:</p>

<figure class="pre"><div data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">.isSafari16 h1 { font-variation-settings: "opsz" 60; }
.isSafari16 h2 { font-variation-settings: "opsz" 35; }
.isSafari16 h3 { font-variation-settings: "opsz" 30; }
.isSafari16 body { font-variation-settings: "opsz" 25; }
.isSafari16 footer { font-variation-settings: "opsz" 12; }
</code></pre></div></figure>

<p>This works well, but because the styles are being manually applied to selected elements, rather than automatically on a text size basis, some subtle differences are lost with the responsive text sizing Iâ€™m applying.</p>

<p>Itâ€™ll do for now, and hopefully the situation will be fixed for the release of Safari 17. <ins><strong>Update</strong>: It was fixed by version 16.4!</ins></p></div></section>
<p><a href='https://clagnut.com/blog/2423/'>Read or add comments</a></p>]]></description>
			<category domain="https://clagnut.com/archive/browsers/">Browsers</category>
			<category domain="https://clagnut.com/archive/typography/">Typography</category>
			<category domain="https://clagnut.com/archive/css_techniques/">CSS techniques</category>
		</item>
	</channel>
		</rss>