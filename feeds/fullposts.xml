<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
			<channel>
				<title>Clagnut</title>
				<link>https://clagnut.com/</link>
				<atom:link href="https://clagnut.com/feeds/fullposts.xml" rel="self" type="application/rss+xml" />
				<description>A blog by Richard Rutter. Root through a heap of web design and development stuff and a few other tasty morsels. (latest 5 posts in full)</description>
				<language>en-gb</language>
				<copyright>Copyright 2003-2023, Richard Rutter</copyright>
				<webMaster>rich@clagnut.com (Richard Rutter)</webMaster>
				<managingEditor>rich@clagnut.com (Richard Rutter)</managingEditor>
				<image>
					<url>https://clagnut.com/images/clagnut_rss.png</url>
					<link>https://clagnut.com/</link>
					<title>Clagnut</title>
					<width>88</width>
					<height>31</height>
				</image>
		<item>
			<pubDate>Fri, 10 Feb 2023 10:26:48 PST</pubDate>
			<title>Font optical sizing bug in Safari 16</title>
			<link>https://clagnut.com/blog/2423/</link>
			<guid>https://clagnut.com/blog/2423/</guid>
			<description><![CDATA[<section><div class='prose'><p><ins><strong>Update</strong>: as of Safari 16.4, this bug <a href="https://github.com/WebKit/WebKit/pull/10126">has been fixed</a>. I&#8217;ve updated the code snippet to reflect this. Thanks to the efforts of Myles and team for turning this around so quickly.</ins></p>

<p>In my <a href="https://clagnut.com/blog/2422">previous post</a> I extolled the virtues of Literata’s font optical sizing, in particular how it worked automatically in the browser. By ‘it’ I mean how the corresponding style was chosen along the optical size axis of the variable font, based on type size.</p>

</div><!-- /.prose --><figure>
    <img loading='lazy' src="https://clagnut.com/images/2423/literata-optical-axis.png" alt="Four type styles in a line, ranging from low contrast on the left to high contrast on the right."/>
    <figcaption>
        Literata’s optical size axis from <7px to >72px. Image ©TypeTogether.
    </figcaption>
</figure><div class='prose'>

<p>This behaviour is turned on by default, but if you wanted to turn off the automatic optical sizing, you can use this declaration, the effect being to style text as if it were set at 12px:</p>

<figure class="pre" data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">font-optical-sizing: none;
</code></pre></figure>

<p>And you can turn it back on with:</p>

<figure class="pre" data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">font-optical-sizing: auto;
</code></pre></figure>

<p>Automatic selection of optical size styles in a variable font has been supported in browsers since at least 2020. That is until the release of Safari 16 with macOS Ventura. A regression was inadvertently introduced meaning the browser acted as if <code>font-optical-sizing</code> was turned off. <a href="https://bugs.webkit.org/show_bug.cgi?id=247987">The bug</a> was an unintened consequence of improvements being made to <a href="https://developer.apple.com/documentation/coretext">Core Text</a>. Fortunately it’s being actively fixed.</p>

<p>So what to do in the meantime? The answer is to use the low level <code>font-variation-settings</code> property to manually set the optical size. I only want to do this for Safari 16.1, 16.2 and 16.3, so firstly I use a bit of clunky user agent sniffing to set a root-level class accordingly:</p>

<figure class="pre" data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">&lt;script&gt;
var root = document.getElementsByTagName('html')[0];
if (navigator.userAgent.indexOf('Safari') != -1 &amp;&amp;
    navigator.userAgent.indexOf('Chrome') == -1 &amp;&amp;
    ( (navigator.userAgent.indexOf('Version/16.1') != -1) ||
      (navigator.userAgent.indexOf('Version/16.2') != -1) ||
      (navigator.userAgent.indexOf('Version/16.3') != -1) )  {
    root.classList.add("isSafari16");
}
&lt;/script&gt;
</code></pre></figure>

<p>Then I style my headings and body text according to the most appropriate style along the optical size axis:</p>

<figure class="pre" data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">.isSafari16 h1 { font-variation-settings: "opsz" 60; }
.isSafari16 h2 { font-variation-settings: "opsz" 35; }
.isSafari16 h3 { font-variation-settings: "opsz" 30; }
.isSafari16 body { font-variation-settings: "opsz" 25; }
.isSafari16 footer { font-variation-settings: "opsz" 12; }
</code></pre></figure>

<p>This works well, but because the styles are being manually applied to selected elements, rather than automatically on a text size basis, some subtle differences are lost with the responsive text sizing I’m applying.</p>

<p>It’ll do for now, and hopefully the situation will be fixed for the release of Safari 17. <ins><strong>Update</strong>: It was fixed by version 16.4!</ins></p></div></section>
<p><a href='https://clagnut.com/blog/2423/'>Read or add comments</a></p>]]></description>
			<category domain="https://clagnut.com/archive/browsers/">Browsers</category>
			<category domain="https://clagnut.com/archive/typography/">Typography</category>
			<category domain="https://clagnut.com/archive/css_techniques/">CSS techniques</category>
		</item>
		<item>
			<pubDate>Tue, 07 Feb 2023 14:39:11 PST</pubDate>
			<title>New year, new typeface: switching to variable fonts</title>
			<link>https://clagnut.com/blog/2422/</link>
			<guid>https://clagnut.com/blog/2422/</guid>
			<description><![CDATA[<section><div class='prose'><p>This site used to be set in two primary typefaces. By no coincidence, this was based on the combination I used in the <a href="http://book.webtypography.net/">Web Typography book</a>: <a href="https://typejockeys.com/font/ingeborg">Ingeborg</a> for headings, and <a href="https://web.archive.org/web/20160311141455/http://www.typejockeys.com/fonts/premiera" title="This font is no longer available, so using an archive link">Premiéra</a> for body text, both released by <a href="https://typejockeys.com/">Typejockeys</a>.</p>

<p>Ingeborg’s <em>fat</em> weight provides the distinctive high contrast Didone-style typeface I like to use nice and big. Premiéra, conversely, is a low contrast, robust typeface designed for use at smaller sizes and demanding conditions (such as screens), perfect for the main text.</p>

</div><!-- /.prose --><figure>
    <img loading='lazy' src="https://clagnut.com/images/2422/ingeborg-premiera.svg" alt=""/>
    <figcaption>
        Ingeborg Fat heading, with text set in Premiéra.
    </figcaption>
</figure><div class='prose'>

<p>Between Ingeborg and Premiéra, I use multiple styles and weights. I wondered if there were any variable fonts that might achieve performance and perhaps stylistic benefits. Perusing Nick Sherman’s incredibly useful <a href="https://v-fonts.com">Variable Fonts</a> site, I was reminded about <a href="https://www.type-together.com/literata-font">Literata</a>. Literata was <a href="https://www.type-together.com/literata-book">originally designed</a> in 2014 by <a href="https://www.type-together.com/">TypeTogether</a> as static fonts for the Google Play Books reader. In 2020 it received a massive update to make full use of variable font technology.</p>

<p>The original design was excellent. It’s now a really impressive full-blown type family. Weights run from Light (200) to Black (900), but what really grabbed my attention is its optical size axis. It’s one of relatively few variable fonts that does this, and it works superbly. Literata seamlessly runs from a sturdy low contrast Caption size, through to a delicate high contrast Display style, with the original body text and subheading styles sat in between.</p>

</div><!-- /.prose --><figure class="fullbleed">
    <img loading='lazy' src="https://clagnut.com/images/2422/literata.png" alt="Text samples for display, subhead, text and caption optical sizes, in weights from 200 to 900. Master styles were drawn at 72pt 200, 72pt 400, 72pt 900, 12pt 200, 12pt 400, 12pt 900, 7pt 500, and 7pt 900."/>
    <figcaption>
        Literata’s static styles and recommendations for use. Black triangles indicate the drawn master styles. Image ©TypeTogether.
    </figcaption>
</figure><div class='prose'>

<p>The result is that, within one typeface and a single font file, I can get the high contrast impact I was achieving with Ingeborg, paired to the lower contrast readability for which I was using Premiéra. The two uses work seamlessly across font sizes in one unified type design. All I need to do is set the size and weight as normal, and the optically sized style is selected automatically.</p>

<p>While Ingeborg and the display weight of Literata bear some resemblance stylistically – they both have the same Didone influence – I will concede that Premiéra’s design differs considerably: its dynamic form and wedge serifs are from a different background to the rational axis and ball terminals of Literata. However they are both designed beautifully to do the same job, and that’s good enough for me.</p>

<h2>Performance</h2>

<p>Before switching to Literata, I was using two weights of Ingeborg (for headings and subheadings) and two weights of Premiéra. This gave the following payload for <abbr class='c2sc'>WOFF2</abbr>s:</p>

<ol>
<li>Ingeborg Fat – 45 kB</li>
<li>Ingeborg Heavy – 51 kB</li>
<li>Premiéra Book – 47 kB</li>
<li>Premiéra Bold – 53 kB</li>
</ol>

<p>That makes a total of 196 kB. Now here’s the surprise.  I <a href="https://clagnut.com/blog/2418/">subsetted</a> all fonts to the same generous set of characters, but Literata comes in at 205 Kb. So in terms of file size there’s no saving, although there are 3 fewer requests to the server. In Literata’s defence, it also provides a small-text caption style that I’m not using. But to my mind the way to look at it is that for no extra payload Literata gives a superior result because of that brilliantly executed optical size axis. Headings and subheadings are individually styled according to size, the sturdiness and contrast adjusts to the <a href="https://utopia.fyi">dynamic text sizing</a> for different screen sizes (more on that another time), and the overall feel is harmonious but highly functional with it.</p>

<p>One final thing. Thanks to Google’s OpenFont License (OFL), Literata is free to own and use. Normally a type family like this would cost upwards of £500, with good reason.</p></div></section>
<p><a href='https://clagnut.com/blog/2422/'>Read or add comments</a></p>]]></description>
			<category domain="https://clagnut.com/archive/site_news/">Clagnut news</category>
			<category domain="https://clagnut.com/archive/typography/">Typography</category>
		</item>
		<item>
			<pubDate>Sun, 18 Sep 2022 15:35:38 PST</pubDate>
			<title>How to typeset a date range properly</title>
			<link>https://clagnut.com/blog/2419/</link>
			<guid>https://clagnut.com/blog/2419/</guid>
			<description><![CDATA[<section><div class='prose'><p>As I write this we in the <abbr class='c2sc'>UK</abbr> are reaching the culmination of 10 days of mourning following the death of the Queen. Wherever you look – on websites, billboards and shop windows – we are reminded of the longevity of Her Majesty’s life. More precisely we’re presented with a date range: 1926 – 2022.</p>

</div><!-- /.prose --><figure><img loading='lazy' src="https://clagnut.com/images/2419/queen.jpg" alt="Photo of the Queen on a bus stop advertising screen" /><figcaption>Messages about the Queen on screens in bus stops and shop windows throughout the city</figcaption></figure><div class='prose'>

<p>A badly typeset date range, usually comprising a hyphen surrounded by two spaces. “What’s wrong with that?,” you might well ask. A lack of attention to detail for a start. There is a long-standing convention for how to properly typeset a date range, or any numerical range for that matter, but it involves going a bit deeper beyond what faces on our standard keyboards (which are still relics from the age typewriters).</p>

<p>Even the <a href="https://www.royal.uk">Royals’ own website</a> makes the same mistake:</p>

</div><!-- /.prose --><figure><img loading='lazy' src="https://clagnut.com/images/2419/hyphen.jpg" alt="Screenshot" /><figcaption>Royal.uk uses a spaced hyphen for the date range, made worse by letter-spacing<figcaption></figure><div class='prose'>

<p>The preferred way is to use an <em>en-dash</em> instead of a hyphen, and separate it from the numerals with a <em>thin-space</em>, like this:</p>

<p><span style="font-size:1.5em">1926 – 2022</span></p>

<p>Compare with the poorly typeset:</p>

<p><span style="font-size:1.5em">1926&#32;&#45;&#32;2022</span></p>

<p>The point here is that the date range is a self-contained element, an individual thought if you like, not two loosely connected items. Using a tightly spaced dash joins the numerals together into a single element.</p>

<p>Any typographically configured <abbr class='c2sc'>CMS</abbr> should automatically convert your number-space-hyphen-space-number combination for you, swapping in thin spaces and en-dash. If you need to manually insert the desired characters, the easiest way for you right now is to cut and paste straight out of this page – they are standard Unicode glyphs.</p>

<p>I also use a handy Unicode character finder for these purposes. There’s a few around, but my favourite is <a href="https://glyphfinder.com">Glyphfinder</a> for MacOS. (The Glyphfinder website was down for me at the time of writing, but you can get the <a href="https://ueberdosis.gumroad.com/l/ZaEQz">download from Gumroad</a> for the price of a pint).</p></div></section>
<p><a href='https://clagnut.com/blog/2419/'>Read or add comments</a></p>]]></description>
			<category domain="https://clagnut.com/archive/typography/">Typography</category>
			<category domain="https://clagnut.com/archive/markup/">Mark-up techniques</category>
		</item>
		<item>
			<pubDate>Fri, 06 May 2022 15:30:25 PST</pubDate>
			<title>How to subset a variable font</title>
			<link>https://clagnut.com/blog/2418/</link>
			<guid>https://clagnut.com/blog/2418/</guid>
			<description><![CDATA[<section><div class='prose'><p>Using variable fonts can be an excellent way to reduce bandwidth and latency as they can highly efficiently combine multiple styles into one font file. However, as with standard professional fonts, they can contain a lot characters you will never use (in my case this would include Greek and Cyrillic – your mileage will vary). These un-needed characters can be removed from the font to reduce file-size, a process called subsetting.</p>

<p>This post is primarily an aide-memoire explaining how to subset fonts from first principles on a Mac (macOS Monterey 12.3.1 at time of writing). I&#8217;ll be using <a href="https://github.com/fonttools/fonttools">fonttools</a>, an open source font manipulation library written in Python, to subset a font and create a <abbr class='c2sc'>WOFF2</abbr> font file for use on the Web.</p>

<h3>1.&nbsp;Install&nbsp;Python</h3>

<p>macOS no longer comes bundled with Python, so firstly download and install <a href="https://www.python.org/downloads/macos/">the latest version of Python 3</a> following the instructions in the macOS installer.</p>

<h3>2.&nbsp;Install&nbsp;fonttools</h3>

<p>Once Python 3 has installed successfully, open Terminal and install fonttools using pip (which is shipped with Python):</p>

<figure class="pre" data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">python3 -m pip install fonttools
</code></pre></figure>

<h3>3.&nbsp;Install&nbsp;Brotli</h3>

<p>Next install Brotli compression, which is required to output a <abbr class='c2sc'>WOFF2</abbr>.</p>

<figure class="pre" data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">python3 -m pip install brotli
</code></pre></figure>

<h3>4. Move to where the font&nbsp;file&nbsp;is</h3>

<p>Change the Terminal directory to the folder containing the font file you want to convert, eg.</p>

<figure class="pre" data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">cd /Users/rich/
</code></pre></figure>

<h3>5.&nbsp;Run&nbsp;fonttools</h3>

<p>Finally run the fonttools subsetting routine using the desired options. For example:</p>

<figure class="pre" data-element="code-block"><div class="code-block__header"><div role="alert"></div></div><pre><code class="language-css">pyftsubset LiterataTT.ttf 
    -unicodes="U+0020-007F, U+00A0-00FF, U+0100-017F, U+2000-206F, U+2070-209F, U+20A0-20CF, U+2100-214F, U+2200-22FF, U+FB00-FB4F" 
    -layout-features='*' 
    -flavor="woff2" 
    -output-file="LiterataTT.woff2"
</code></pre></figure>

<p>In this case I am subsetting <a href="https://www.type-together.com/literata-font"><code>LiterataTT.ttf</code></a> and outputting as <code>LiterataTT.woff2</code> into the same directory.</p>

<p>The <code>unicodes</code> option specifies which characters to include in the subset, by way of <a href="https://jrgraphix.net/r/Unicode/">Unicode character ranges</a>. It doesn&#8217;t matter if the font doesn&#8217;t have all the Unicode ranges available in the list, or all the characters within a specified range – these just get ignored. In this case I am including the following Unicode ranges:</p>

</div><!-- /.prose --><figure class="fig-table">
<table>
<tbody>
<tr><td>U+0020-007F</td><td><a href="https://jrgraphix.net/r/Unicode/0020-007F">Basic Latin</a></td></tr>
<tr><td>U+00A0-00FF</td><td><a href="https://jrgraphix.net/r/Unicode/00A0-00FF">Latin-1 Supplement</a></td></tr>
<tr><td>U+0100-017F</td><td><a href="https://jrgraphix.net/r/Unicode/0100-017F">Latin Extended-A</a></td></tr>
<tr><td>U+2000-206F</td><td><a href="https://jrgraphix.net/r/Unicode/2000-206F">General Punctuation</a></td></tr>
<tr><td>U+2070-209F</td><td><a href="https://jrgraphix.net/r/Unicode/2070-209F">Superscripts and Subscripts</a></td></tr>
<tr><td>U+20A0-20CF</td><td><a href="https://jrgraphix.net/r/Unicode/20A0-20CF">Currency Symbols</a></td></tr>
<tr><td>U+2100-214F</td><td><a href="https://jrgraphix.net/r/Unicode/2100-214F">Letterlike Symbols</a></td></tr>
<tr><td>U+2200-22FF</td><td><a href="https://jrgraphix.net/r/Unicode/2200-22FF">Mathematical Operators</a></td></tr>
<tr><td>U+FB00-FB4F</td><td><a href="https://jrgraphix.net/r/Unicode/FB00-FB4F">Alphabetic Presentation Forms</a></td></tr>
</tbody>
</table>
</figure><div class='prose'>

<p>The <code>layout-features</code> option specifies which OpenType layout features to include, such as kerning, ligatures, numerals and alternate characters. In this example I&#8217;m using <code>layout-features='*'</code> to include all the features available. Instead, you can also add selected features to the default set. For example <code>layout-features+=onum,pnum,ss01</code> will keep the default set of features and add <code>onum</code>, <code>pnum</code> and <code>ss01</code> (old-style and proportional numerals, and styleset 1). The default features include <code>calt</code>, <code>clig</code>, <code>kern</code> and <code>liga</code> among others. See the <a href="https://fonttools.readthedocs.io/en/latest/subset/index.html?highlight=layout-features#glyph-set-expansion">fonttools Documentation</a> for more info on <code>layout-features</code>.</p>

<p>Applying that subsetting routine to LiterataTT reduced the original font file from 913Kb to 207Kb. The latter is still a fairly large file, but I was conservative in my subsetting (as in keeping in plenty of European characters and OpenType features) and, as a variable font, this file will cover all situations from light to black weights and low to high contrast optical sizing.</p></div></section>
<p><a href='https://clagnut.com/blog/2418/'>Read or add comments</a></p>]]></description>
			<category domain="https://clagnut.com/archive/tools_software/">Tools &amp; software</category>
			<category domain="https://clagnut.com/archive/typography/">Typography</category>
		</item>
		<item>
			<pubDate>Sun, 30 Jan 2022 19:21:17 PST</pubDate>
			<title>Top Tunes 2021</title>
			<link>https://clagnut.com/blog/2416/</link>
			<guid>https://clagnut.com/blog/2416/</guid>
			<description><![CDATA[<section><div class='prose'><p>I&#8217;ve just about squeezed this out while it&#8217;s still January – my annual compilation of favourite songs from those I bought in the last year (not all were released this year). As a deviation from the electronic pop favourites of last year, I&#8217;ve gone a bit post-punk, or whatever the kids are calling it nowadays: Squid; Black Country, New Road; and a cracking new album from Mogwai. But my absolute favourite is Darkside (both albums) and Nicolas Jaar from 2013.</p>

<p>RÃ³isÃ­n Murphy gets in again, with a banging remix from her producer Crooked Man. Snapped Ankles make a welcome return and there&#8217;s a fab Hot Chip remix of long time favourite Django Django.</p>

</div><!-- /.prose --><figure><img loading='lazy' src="https://clagnut.com/images/2021vinyl.jpg" alt="Photo" /><figcaption>Over fifty vinyl records spread out on my floor</figcaption></figure><div class='prose'>

<p>Because I keep these playlists roughly to the length of a <abbr class='c2sc'>CD</abbr>, there are some notable omissions from this list. Black Midi is one, although I find it a little hard work at the moment. Also a classic oldie from Metronomy, some Seventies jazz funk from Ian Carr&#8217;s Nucleus, and a classic album from Love which was largely unknown to me – an omission generously corrected by my good friend Anthony.</p>

<h3>The Best Songs I Bought in&nbsp;2021,&nbsp;Ever</h3>

<ol>
<li><cite>Pearl in the Palm</cite> by W. H. Lung from the album <cite>Vanities</cite></li>
<li><cite>Teeth</cite> by Working Men&#8217;s Club from the album <cite>Working Men&#8217;s Club</cite></li>
<li><cite>Black Widow Spider</cite> by Parquet Courts from the album <cite>Sympathy For Life</cite></li>
<li><cite>G.S.K.</cite> by Squid from the album <cite>Bright Green Field</cite></li>
<li><cite>The Limit</cite> by Darkside from the album <cite>Spiral</cite></li>
<li><cite>Der Rhythmus der Maschinen</cite> by Public Service Broadcasting from the album <cite>Bright Magic</cite></li>
<li><cite>Push/Pull</cite> by bdrmm from the album <cite>Bedroom</cite></li>
<li><cite>Ritchie Sacramento</cite> by Mogwai from the album <cite>As The Love Continues</cite></li>
<li><cite>Hardcore Jealousy</cite> by RÃ³isÃ­n Murphy from the album <cite>Crooked Machine</cite></li>
<li><cite>The Revolution Of Super Visions</cite> by Jane Weaver from the album <cite>Flock</cite></li>
<li><cite>Athens, France</cite> by Black Country, New Road from the album <cite>For The First Time</cite></li>
<li><cite>Festival</cite> by Tom Misch & Yussef Dayes from the album <cite>What Kinda Music</cite></li>
<li><cite>Too Many Kids Finding Rain In the Dust</cite> by Nicolas Jaar from the album <cite>Space Is Only Noise</cite></li>
<li><cite>You&#8217;ll Have to Scream Louder</cite> by Tindersticks from the album <cite>Distractions</cite></li>
<li><cite>All I Ever Need</cite> by Caribou from the album <cite>Our Love</cite></li>
<li><cite>Illumina</cite> by Lamb from the album <cite>The Secret Of Letting Go</cite></li>
<li><cite>Emergence in Nature</cite> by Hannah Peel from the album <cite>Fir Wave</cite></li>
<li><cite>Shared Particles</cite> by <abbr class='c2sc'>AK</abbr>/DK from the album <cite>Shared Particles</cite></li>
<li><cite>Rhythm Is Our Business</cite> by Snapped Ankles from the album <cite>Forest Of Your Problems</cite></li>
<li><cite>Glowing in the Dark (Hot Chip remix)</cite> by Django Django from the <abbr class='c2sc'>A23</abbr> <cite>Glowing in the Dark – the Remixes</cite></li>
</ol>

<p>You can listen to the playlist on <a href="https://open.spotify.com/playlist/5ayTtvb21f18K0ZwNOXvCZ?si=fe5a6c611f3744be">Spotify</a> or <a href="https://music.apple.com/gb/playlist/2021-the-best-songs-i-bought-in-2021-ever/pl.u-jV8966juYaX5z">Apple Music</a>.</p></div></section>
<p><a href='https://clagnut.com/blog/2416/'>Read or add comments</a></p>]]></description>
			<category domain="https://clagnut.com/archive/music/">Music</category>
		</item>
	</channel>
		</rss>